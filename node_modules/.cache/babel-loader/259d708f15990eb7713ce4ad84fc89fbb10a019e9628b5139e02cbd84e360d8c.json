{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nexport const useVideoProcessing = () => {\n  _s();\n  const [processing, setProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [images, setImages] = useState([]);\n  const [error, setError] = useState('');\n  const processVideo = async file => {\n    if (!file) {\n      setError('Please select a video file first.');\n      return;\n    }\n    setProcessing(true);\n    setProgress(0);\n    setImages([]);\n    setError('');\n    const formData = new FormData();\n    formData.append('video', file);\n    try {\n      const response = await fetch('/api/process-video', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Video processing failed');\n      }\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        if (done) break;\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n        for (const line of lines) {\n          if (line.startsWith('progress:')) {\n            setProgress(parseInt(line.split(':')[1]));\n          } else if (line.startsWith('image:')) {\n            setImages(prev => [...prev, line.split(':')[1]]);\n          }\n        }\n      }\n      setProcessing(false);\n    } catch (error) {\n      setError('An error occurred during video processing.');\n      setProcessing(false);\n    }\n  };\n  const reset = () => {\n    setProcessing(false);\n    setProgress(0);\n    setImages([]);\n    setError('');\n  };\n  return {\n    processing,\n    progress,\n    images,\n    error,\n    processVideo,\n    reset\n  };\n};\n_s(useVideoProcessing, \"ntnkKzCgoKzLyWswtfqEYl49Qvg=\");","map":{"version":3,"names":["useState","useVideoProcessing","_s","processing","setProcessing","progress","setProgress","images","setImages","error","setError","processVideo","file","formData","FormData","append","response","fetch","method","body","ok","Error","reader","getReader","decoder","TextDecoder","value","done","read","chunk","decode","lines","split","line","startsWith","parseInt","prev","reset"],"sources":["/Users/borisfamily/Desktop/Video2Image/src/components/VideoProcessor/hooks/useVideoProcessing.js"],"sourcesContent":["import { useState } from 'react';\n\nexport const useVideoProcessing = () => {\n  const [processing, setProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [images, setImages] = useState([]);\n  const [error, setError] = useState('');\n\n  const processVideo = async (file) => {\n    if (!file) {\n      setError('Please select a video file first.');\n      return;\n    }\n\n    setProcessing(true);\n    setProgress(0);\n    setImages([]);\n    setError('');\n\n    const formData = new FormData();\n    formData.append('video', file);\n\n    try {\n      const response = await fetch('/api/process-video', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Video processing failed');\n      }\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n\n      while (true) {\n        const { value, done } = await reader.read();\n        if (done) break;\n        \n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n        \n        for (const line of lines) {\n          if (line.startsWith('progress:')) {\n            setProgress(parseInt(line.split(':')[1]));\n          } else if (line.startsWith('image:')) {\n            setImages(prev => [...prev, line.split(':')[1]]);\n          }\n        }\n      }\n\n      setProcessing(false);\n    } catch (error) {\n      setError('An error occurred during video processing.');\n      setProcessing(false);\n    }\n  };\n\n  const reset = () => {\n    setProcessing(false);\n    setProgress(0);\n    setImages([]);\n    setError('');\n  };\n\n  return { processing, progress, images, error, processVideo, reset };\n};"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMW,YAAY,GAAG,MAAOC,IAAI,IAAK;IACnC,IAAI,CAACA,IAAI,EAAE;MACTF,QAAQ,CAAC,mCAAmC,CAAC;MAC7C;IACF;IAEAN,aAAa,CAAC,IAAI,CAAC;IACnBE,WAAW,CAAC,CAAC,CAAC;IACdE,SAAS,CAAC,EAAE,CAAC;IACbE,QAAQ,CAAC,EAAE,CAAC;IAEZ,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC;IAE9B,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,EAAE;QACjDC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MAEA,MAAMC,MAAM,GAAGN,QAAQ,CAACG,IAAI,CAACI,SAAS,CAAC,CAAC;MACxC,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;MAEjC,OAAO,IAAI,EAAE;QACX,MAAM;UAAEC,KAAK;UAAEC;QAAK,CAAC,GAAG,MAAML,MAAM,CAACM,IAAI,CAAC,CAAC;QAC3C,IAAID,IAAI,EAAE;QAEV,MAAME,KAAK,GAAGL,OAAO,CAACM,MAAM,CAACJ,KAAK,CAAC;QACnC,MAAMK,KAAK,GAAGF,KAAK,CAACG,KAAK,CAAC,IAAI,CAAC;QAE/B,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;UACxB,IAAIE,IAAI,CAACC,UAAU,CAAC,WAAW,CAAC,EAAE;YAChC5B,WAAW,CAAC6B,QAAQ,CAACF,IAAI,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC3C,CAAC,MAAM,IAAIC,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC,EAAE;YACpC1B,SAAS,CAAC4B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEH,IAAI,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAClD;QACF;MACF;MAEA5B,aAAa,CAAC,KAAK,CAAC;IACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,QAAQ,CAAC,4CAA4C,CAAC;MACtDN,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;EAED,MAAMiC,KAAK,GAAGA,CAAA,KAAM;IAClBjC,aAAa,CAAC,KAAK,CAAC;IACpBE,WAAW,CAAC,CAAC,CAAC;IACdE,SAAS,CAAC,EAAE,CAAC;IACbE,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,OAAO;IAAEP,UAAU;IAAEE,QAAQ;IAAEE,MAAM;IAAEE,KAAK;IAAEE,YAAY;IAAE0B;EAAM,CAAC;AACrE,CAAC;AAACnC,EAAA,CAhEWD,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}